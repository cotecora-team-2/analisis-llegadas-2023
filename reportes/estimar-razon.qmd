---
title: "Prueba de muestras - estimador de raz√≥n"
format: html
---

```{r}
library(quickcountmx)
#| message: false
source("../R/simular-censuradas/procesar.R")
source("../R/simular-censuradas/aux_survival.R")
source("../R/simular-censuradas/ajustar_modelo.R")
```

```{r}
muestras_coah_tbl <- read_csv("muestras/local-muestras-censuradas-coah.csv")
muestras_mex_tbl <- read_csv("muestras/local-muestras-censuradas-mex.csv")
muestras_lst <- list(muestras_coah_tbl, muestras_mex_tbl)
```

```{r}
resultados <- map(1:2, function(i){
  nombre_marco <- paste0("muestras/marco-", tolower(estados)[i], "-2017.csv")
  marco <-read_csv(nombre_marco) |> 
    mutate(ID_DTTO_LOCAL_Ago2022 = as.character(ID_DTTO_LOCAL_Ago2022))
  estratos_tbl <- marco |> count(ID_DTTO_LOCAL_Ago2022)
  id_estado <- marco$ID_ESTADO |> first()
  muestras <- muestras_lst[[i]]
  estimaciones <- map_df(1:100, function(rep){
    map_df(c(50, 75, 90, 100), function(corte_s){
      muestra <- muestras |> filter(num_muestra == rep & corte == corte_s) |> 
        mutate(ID_DTTO_LOCAL_Ago2022 = as.character(ID_DTTO_LOCAL_Ago2022)) |> 
        mutate(OTROS = NUM_VOTOS_CAN_NREG + NUM_VOTOS_NULOS)
      est_razon <- ratio_estimation(muestra, stratum = ID_DTTO_LOCAL_Ago2022, 
                                  data_stratum = estratos_tbl, 
                                  n_stratum = n, 
                                  parties = c(CAND_0:CAND_5, OTROS), 
                                  B = 70
                                  )
    est_razon$estado <- estados[i]
    est_razon$ID_ESTADO <- id_estado
    est_razon$num_muestra <- rep
    est_razon$corte <- corte_s
    est_razon <- est_razon |> 
      mutate(LI = prop - 2 * std_error,
             LS = prop + 2 * std_error) |> 
      rename(candidato = party) |> 
      mutate(candidato = ifelse(candidato == "part", "PART", candidato))
    est_razon
  })
  })
  estimaciones |> select(estado, num_muestra, corte, candidato, LI, LS)
})
write_csv(resultados[[1]], paste0("salidas/resultados_", resultados[[1]]$estado[1], ".csv"))
write_csv(resultados[[2]], paste0("salidas/resultados_", resultados[[2]]$estado[1], ".csv"))
```

```{r}
computos_res <- map(lista_computos, function(computos){
  estratos_tbl <- computos |> 
    count(ID_DTTO_LOCAL_Ago2022) 
  computos <- computos |>
    mutate(OTROS = NUM_VOTOS_CAN_NREG + NUM_VOTOS_NULOS)
   total_obs <- ratio_estimation(computos ,
                                  stratum = ID_DTTO_LOCAL_Ago2022,
                                  data_stratum = estratos_tbl,
                                  n_stratum = n, 
                  parties = c(CAND_0:CAND_5, OTROS),
                  std_errors = FALSE)
   total_obs$ID_ESTADO <- first(computos$ID_ESTADO)
   total_obs$NOMBRE_ESTADO <- first(computos$NOMBRE_ESTADO)
   total_obs |> rename(candidato = party) |> 
     rename(prop_computos = prop) |> 
     mutate(candidato = ifelse(candidato == "part", "PART", candidato))
   }) |> bind_rows() 
```

```{r}
tabla_estados <- tibble(ID_ESTADO = c(5, 15), NOMBRE_ESTADO = c("COAHUILA", "MEXICO"), estado = c("COAH", "MEX"))
coberturas <- bind_rows(resultados) |>
  left_join(tabla_estados) |>
  left_join(computos_res)
```

```{r}
coberturas |> 
  mutate(cubre = prop_computos >= LI & prop_computos <= LS) |> 
  group_by(estado, corte, candidato) |> 
  summarise(cobertura = mean(cubre)) |> 
ggplot(aes(x = corte, y = cobertura, colour = candidato)) +
  geom_line() + geom_point() +
  facet_wrap(~ estado)
```

